// File generated from our OpenAPI spec by Stainless.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import { getAuthHeaders } from "./auth.mjs";
import * as API from '@anthropic-ai/bedrock-sdk/resources/index';
/** API Client for interfacing with the Anthropic Bedrock API. */
export class AnthropicBedrock extends Core.APIClient {
    /**
     * API Client for interfacing with the Anthropic Bedrock API.
     *
     * @param {string | null | undefined} [opts.awsSecretKey]
     * @param {string | null | undefined} [opts.awsAccessKey]
     * @param {string | undefined} [opts.awsRegion=process.env['AWS_REGION'] ?? us-east-1]
     * @param {string | null | undefined} [opts.awsSessionToken]
     * @param {string} [opts.baseURL=process.env['ANTHROPIC_BEDROCK_BASE_URL'] ?? https://bedrock-runtime.SDK_ClientAttribute__aws_region.amazonaws.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('ANTHROPIC_BEDROCK_BASE_URL'), awsSecretKey = null, awsAccessKey = null, awsRegion = Core.readEnv('AWS_REGION') ?? 'us-east-1', awsSessionToken = null, ...opts } = {}) {
        const options = {
            awsSecretKey,
            awsAccessKey,
            awsRegion,
            awsSessionToken,
            ...opts,
            baseURL: baseURL || `https://bedrock-runtime.${awsRegion}.amazonaws.com`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 600000 /* 10 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.completions = new API.Completions(this);
        this._options = options;
        this.awsSecretKey = awsSecretKey;
        this.awsAccessKey = awsAccessKey;
        this.awsRegion = awsRegion;
        this.awsSessionToken = awsSessionToken;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    async prepareRequest(request, { url, options }) {
        const regionName = this.awsRegion;
        if (!regionName) {
            throw new Error('Expected `awsRegion` option to be passed to the client or the `AWS_REGION` environment variable to be present');
        }
        const headers = await getAuthHeaders(request, {
            url,
            regionName,
            awsAccessKey: this.awsAccessKey,
            awsSecretKey: this.awsSecretKey,
            awsSessionToken: this.awsSessionToken,
        });
        request.headers = { ...request.headers, ...headers };
    }
}
_a = AnthropicBedrock;
AnthropicBedrock.AnthropicBedrock = _a;
AnthropicBedrock.HUMAN_PROMPT = '\n\nHuman:';
AnthropicBedrock.AI_PROMPT = '\n\nAssistant:';
AnthropicBedrock.AnthropicBedrockError = Errors.AnthropicBedrockError;
AnthropicBedrock.APIError = Errors.APIError;
AnthropicBedrock.APIConnectionError = Errors.APIConnectionError;
AnthropicBedrock.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
AnthropicBedrock.APIUserAbortError = Errors.APIUserAbortError;
AnthropicBedrock.NotFoundError = Errors.NotFoundError;
AnthropicBedrock.ConflictError = Errors.ConflictError;
AnthropicBedrock.RateLimitError = Errors.RateLimitError;
AnthropicBedrock.BadRequestError = Errors.BadRequestError;
AnthropicBedrock.AuthenticationError = Errors.AuthenticationError;
AnthropicBedrock.InternalServerError = Errors.InternalServerError;
AnthropicBedrock.PermissionDeniedError = Errors.PermissionDeniedError;
AnthropicBedrock.UnprocessableEntityError = Errors.UnprocessableEntityError;
export const { HUMAN_PROMPT, AI_PROMPT } = AnthropicBedrock;
export const { AnthropicBedrockError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } = Errors;
export var toFile = Uploads.toFile;
export var fileFromPath = Uploads.fileFromPath;
(function (AnthropicBedrock) {
    // Helper functions
    AnthropicBedrock.toFile = Uploads.toFile;
    AnthropicBedrock.fileFromPath = Uploads.fileFromPath;
    AnthropicBedrock.Completions = API.Completions;
})(AnthropicBedrock || (AnthropicBedrock = {}));
export default AnthropicBedrock;
//# sourceMappingURL=index.mjs.map