"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIChat = void 0;
const Base_1 = require("../../models/Base");
const ai_1 = require("ai");
const openai_1 = __importDefault(require("openai"));
class OpenAIChat extends Base_1.ChatBase {
    constructor(apiKey, baseURL, organization) {
        super();
        this.openai = new openai_1.default({
            apiKey,
            organization,
            baseURL,
        });
    }
    static messageConversion(message) {
        let messageContent = message.content;
        if (messageContent instanceof Array) {
            messageContent = messageContent
                .filter((part) => part.type === 'text')
                .map((part) => part.text)
                .join('\n\n');
        }
        return {
            role: message.role,
            content: messageContent,
        };
    }
    generateChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.openai) {
                throw new Error('OpenAI client is not initialized');
            }
            return this.openai.chat.completions.create({
                model: chatSettings.model.modelId,
                messages: messages.map(OpenAIChat.messageConversion),
                temperature: chatSettings.temperature,
                max_tokens: this.getMaxGeneratedTokens(chatSettings),
                stream: true,
            });
        });
    }
    generateChatCompletionStream(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateChatCompletion(chatSettings, messages);
            return new ai_1.StreamingTextResponse((0, ai_1.OpenAIStream)(response));
        });
    }
}
exports.OpenAIChat = OpenAIChat;
