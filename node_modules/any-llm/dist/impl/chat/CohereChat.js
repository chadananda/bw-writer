"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CohereChat = void 0;
const Base_1 = require("../../models/Base");
const types_1 = require("../../models/types");
const cohere_ai_1 = require("cohere-ai");
const ai_1 = require("ai");
const api_1 = require("cohere-ai/api");
class CohereChat extends Base_1.ChatBase {
    constructor(apiKey) {
        super();
        this.fallBackSystemMessage = 'You are a helpful assistant';
        this.cohere = new cohere_ai_1.CohereClient({
            token: apiKey,
        });
    }
    generateChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.cohere) {
                throw new Error('Cohere client is not initialized');
            }
            let systemMessage = this.fallBackSystemMessage;
            if (messages && messages[0].role === types_1.ChatRoles.System) {
                const firstMessage = messages.shift();
                systemMessage = (_a = firstMessage === null || firstMessage === void 0 ? void 0 : firstMessage.content) !== null && _a !== void 0 ? _a : this.fallBackSystemMessage;
            }
            const chatHistory = messages.map(CohereChat.messageConversion);
            let lastMessage = chatHistory.pop();
            while (lastMessage && !lastMessage.message) {
                lastMessage = chatHistory.pop();
            }
            return this.cohere.chatStream({
                model: chatSettings.model.modelId,
                message: (lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.message) || systemMessage,
                chatHistory,
                temperature: chatSettings.temperature,
                maxTokens: this.getMaxGeneratedTokens(chatSettings),
            });
        });
    }
    static messageConversion(message) {
        let messageContent = message.content;
        if (Array.isArray(messageContent)) {
            messageContent = messageContent
                .filter((part) => part.type === 'text')
                .map((part) => part.text)
                .join('\n\n');
        }
        return {
            role: message.role == types_1.ChatRoles.System
                ? api_1.ChatMessageRole.System
                : message.role == types_1.ChatRoles.User
                    ? api_1.ChatMessageRole.User
                    : api_1.ChatMessageRole.Chatbot,
            message: messageContent,
        };
    }
    generateChatCompletionStream(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateChatCompletion(chatSettings, messages);
            return new ai_1.StreamingTextResponse((0, ai_1.CohereStream)(response));
        });
    }
}
exports.CohereChat = CohereChat;
