"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureChat = void 0;
const ApiError_1 = require("../../models/ApiError");
const Base_1 = require("../../models/Base");
const types_1 = require("../../models/types");
const ServerChatHelpers_1 = require("../../util/ServerChatHelpers");
const ai_1 = require("ai");
const openai_1 = __importDefault(require("openai"));
const OpenAIChat_1 = require("./OpenAIChat");
class AzureChat extends Base_1.ChatBase {
    constructor(azureOpenaiApiKey, azureOpenaiEndpoint, deploymentId, apiKeyValues) {
        super();
        this.azureOpenai = new openai_1.default({
            apiKey: azureOpenaiApiKey,
            baseURL: `${azureOpenaiEndpoint}/openai/deployments/${deploymentId}`,
            defaultQuery: { 'api-version': '2023-12-01-preview' },
            defaultHeaders: { 'api-key': azureOpenaiApiKey },
        });
        this.apiKeyValues = apiKeyValues;
    }
    generateChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.azureOpenai) {
                throw new Error('Azure OpenAI client is not initialized');
            }
            let deploymentId = '';
            switch (chatSettings.model.modelId) {
                case 'gpt-3.5-turbo':
                    deploymentId = (0, ServerChatHelpers_1.checkAndGetEnv)(this.apiKeyValues, types_1.validEnviromentKeys.AZURE_OPENAI_35_TURBO_ID);
                    break;
                case 'gpt-4':
                    deploymentId = (0, ServerChatHelpers_1.checkAndGetEnv)(this.apiKeyValues, types_1.validEnviromentKeys.AZURE_OPENAI_4_ID);
                    break;
                case 'gpt-4-turbo-preview':
                    deploymentId = (0, ServerChatHelpers_1.checkAndGetEnv)(this.apiKeyValues, types_1.validEnviromentKeys.AZURE_OPENAI_4_TURBO_ID);
                    break;
                case 'gpt-4-vision-preview':
                    deploymentId = (0, ServerChatHelpers_1.checkAndGetEnv)(this.apiKeyValues, types_1.validEnviromentKeys.AZURE_OPENAI_4_TURBO_VISION_ID);
                    break;
                default:
                    throw new ApiError_1.ApiError('Model not found', 400);
            }
            return this.azureOpenai.chat.completions.create({
                model: deploymentId,
                messages: messages.map(OpenAIChat_1.OpenAIChat.messageConversion),
                temperature: chatSettings.temperature,
                max_tokens: this.getMaxGeneratedTokens(chatSettings),
                stream: true,
            });
        });
    }
    generateChatCompletionStream(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateChatCompletion(chatSettings, messages);
            return new ai_1.StreamingTextResponse((0, ai_1.OpenAIStream)(response));
        });
    }
}
exports.AzureChat = AzureChat;
