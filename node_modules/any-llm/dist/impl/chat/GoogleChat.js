"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleChat = void 0;
const generative_ai_1 = require("@google/generative-ai");
const Base_1 = require("../../models/Base");
const types_1 = require("../../models/types");
const ai_1 = require("ai");
class GoogleChat extends Base_1.ChatBase {
    constructor(googleGeminiApiKey) {
        super();
        this.googleAI = new generative_ai_1.GoogleGenerativeAI(googleGeminiApiKey);
    }
    static toGoogleRole(role) {
        if (role === types_1.ChatRoles.Assistant || role === types_1.ChatRoles.System) {
            return 'model';
        }
        return role;
    }
    static convertMessages(message) {
        const parts = [];
        if (message.content instanceof Array) {
            for (const part of message.content) {
                if (part.type === 'text') {
                    parts.push({
                        text: part.text,
                    });
                }
            }
        }
        else {
            parts.push({
                text: message.content,
            });
        }
        return {
            parts,
            role: GoogleChat.toGoogleRole(message.role),
        };
    }
    generateChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.googleAI) {
                throw new Error('Google AI client is not initialized');
            }
            const googleModel = this.googleAI.getGenerativeModel({
                model: chatSettings.model.modelId,
            }, {
                apiVersion: 'v1beta',
            });
            const googleMessages = messages.map(GoogleChat.convertMessages);
            if (googleMessages[messages.length - 1].role === 'model')
                messages.pop();
            const lastMessage = googleMessages.pop();
            if (!lastMessage) {
                throw new Error('No messages found');
            }
            const result = yield googleModel
                .startChat({
                history: googleMessages,
                generationConfig: {
                    temperature: chatSettings.temperature,
                },
            })
                .sendMessageStream(lastMessage.parts);
            return (0, ai_1.GoogleGenerativeAIStream)(result);
        });
    }
    generateChatCompletionStream(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const chat = yield this.generateChatCompletion(chatSettings, messages);
            return new ai_1.StreamingTextResponse(chat);
        });
    }
}
exports.GoogleChat = GoogleChat;
