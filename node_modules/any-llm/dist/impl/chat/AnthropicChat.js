"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnthropicChat = void 0;
const sdk_1 = __importDefault(require("@anthropic-ai/sdk"));
const Base_1 = require("../../models/Base");
const types_1 = require("../../models/types");
const ai_1 = require("ai");
class AnthropicChat extends Base_1.ChatBase {
    constructor(apiKey) {
        super();
        this.fallBackSystemMessage = 'You are a helpful assistant';
        this.anthropic = new sdk_1.default({
            apiKey,
        });
    }
    generateChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this.anthropic) {
                throw new Error('Anthropic client is not initialized');
            }
            let systemMessage = this.fallBackSystemMessage;
            if (messages && messages[0].role === types_1.ChatRoles.System) {
                const firstMessage = messages.shift();
                systemMessage = (_a = firstMessage === null || firstMessage === void 0 ? void 0 : firstMessage.content) !== null && _a !== void 0 ? _a : this.fallBackSystemMessage;
            }
            const formattedMessages = messages.map(this.messageConversion);
            return this.anthropic.messages.create({
                model: chatSettings.model.modelId,
                messages: formattedMessages,
                temperature: chatSettings.temperature,
                system: systemMessage,
                max_tokens: this.getMaxGeneratedTokens(chatSettings),
                stream: true,
            });
        });
    }
    messageConversion(message) {
        return {
            role: message.role == 'system' ? 'assistant' : message.role,
            content: message.content,
        };
    }
    generateChatCompletionStream(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.generateChatCompletion(chatSettings, messages);
            return new ai_1.StreamingTextResponse((0, ai_1.AnthropicStream)(response));
        });
    }
}
exports.AnthropicChat = AnthropicChat;
