"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoyageAIEmbedding = void 0;
const ApiError_1 = require("../../models/ApiError");
const axios_1 = __importDefault(require("axios"));
class VoyageAIEmbedding {
    constructor(apiKey) {
        this.apiKey = apiKey;
        if (!this.apiKey) {
            throw new Error('Voyage API Key not found. Please set it in your profile settings.');
        }
    }
    generateEmbeddings(model, texts, truncation, dimensions, inputType) {
        return __awaiter(this, void 0, void 0, function* () {
            let inputTypeString = 'None';
            if (inputType === 'query' && model.queryMode) {
                inputTypeString = model.queryMode;
            }
            else if (inputType === 'document' && model.documentMode) {
                inputTypeString = model.documentMode;
            }
            try {
                const response = yield axios_1.default.post('https://api.voyageai.com/v1/embeddings', {
                    input: texts,
                    model: model.modelId,
                    input_type: inputTypeString,
                    truncation: truncation !== null && truncation !== void 0 ? truncation : 'None',
                }, {
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${this.apiKey}`,
                    },
                });
                if (response.status === 200) {
                    return {
                        vectors: response.data.data.map((result) => result.embedding),
                        tokensProcessed: response.data.usage.total_tokens,
                    };
                }
                else {
                    throw new ApiError_1.ApiError(`Error generating embeddings: Unexpected response status ${response.status}. The expected status is 200. Please check the Voyage service status or your request parameters.`, response.status);
                }
            }
            catch (error) {
                console.error(error);
                throw new Error(`Error generating embeddings: An exception occurred. Details: ${error instanceof Error ? error.message : 'Unknown error'}. Check your network connection and API key.`);
            }
        });
    }
}
exports.VoyageAIEmbedding = VoyageAIEmbedding;
