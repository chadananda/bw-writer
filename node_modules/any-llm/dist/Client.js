"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const ApiError_1 = require("./models/ApiError");
const types_1 = require("./models/types");
const AnthropicClient_1 = require("./impl/AnthropicClient");
const AzureClient_1 = require("./impl/AzureClient");
const CohereClient_1 = require("./impl/CohereClient");
const GoogleClient_1 = require("./impl/GoogleClient");
const GroqClient_1 = require("./impl/GroqClient");
const MistralClient_1 = require("./impl/MistralClient");
const OpenAIClient_1 = require("./impl/OpenAIClient");
const OpenRouterClient_1 = require("./impl/OpenRouterClient");
const PerplexityClient_1 = require("./impl/PerplexityClient");
const VoyageAIClient_1 = require("./impl/VoyageAIClient");
class Client {
    constructor(provider, apiKeyValues) {
        this.client = {
            chat: () => {
                throw new Error('Client not initialized');
            },
            embeddings: () => {
                throw new Error('Client not initialized');
            },
            chatClient: undefined,
            embeddingsClient: undefined,
            initialize: () => __awaiter(this, void 0, void 0, function* () {
                throw new Error('Client not initialized');
            }),
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            handleError: (error) => {
                throw new Error('Client not initialized');
            },
        };
        this.provider = provider;
        this.apiKeyValues = apiKeyValues;
    }
    initialize() {
        var _a;
        switch (this.provider) {
            case types_1.ModelProvider.OpenAI:
                this.client = new OpenAIClient_1.OpenAIClient();
                break;
            case types_1.ModelProvider.Azure:
                this.client = new AzureClient_1.AzureClient();
                break;
            case types_1.ModelProvider.Groq:
                this.client = new GroqClient_1.GroqClient();
                break;
            case types_1.ModelProvider.Google:
                this.client = new GoogleClient_1.GoogleClient();
                break;
            case types_1.ModelProvider.Mistral:
                this.client = new MistralClient_1.MistralClient();
                break;
            case types_1.ModelProvider.Anthropic:
                this.client = new AnthropicClient_1.AnthropicClient();
                break;
            case types_1.ModelProvider.OpenRouter:
                this.client = new OpenRouterClient_1.OpenRouterClient();
                break;
            case types_1.ModelProvider.Perplexity:
                this.client = new PerplexityClient_1.PerplexityClient();
                break;
            case types_1.ModelProvider.Cohere:
                this.client = new CohereClient_1.CohereClient();
                break;
            case types_1.ModelProvider.VoyageAI:
                this.client = new VoyageAIClient_1.VoyageAIClient();
                break;
            default:
                throw new Error('Provider not found');
        }
        return (_a = this.client) === null || _a === void 0 ? void 0 : _a.initialize(this.apiKeyValues);
    }
    checkClient() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client.chatClient && !this.client.embeddingsClient) {
                yield this.initialize();
            }
            if (!this.client.chatClient && !this.client.embeddingsClient) {
                throw new Error('Client failed initialization');
            }
        });
    }
    createChatCompletion(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.checkClient();
                return yield this.client
                    .chat()
                    .generateChatCompletionStream(chatSettings, messages);
            }
            catch (error) {
                if (error instanceof ApiError_1.ApiError) {
                    return this.handleError(error);
                }
                else {
                    return this.handleError(new ApiError_1.ApiError('An unexpected error occurred', 500));
                }
            }
        });
    }
    createChatCompletionNonStreaming(chatSettings, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkClient();
            const stream = yield this.client
                .chat()
                .generateChatCompletionStream(chatSettings, messages);
            return stream.text();
        });
    }
    parseRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const json = yield request.json();
                // Validate that required fields are present
                if (!json.chatSettings || !json.messages) {
                    throw new Error('Missing required fields: chatSettings or messages');
                }
                return {
                    chatSettings: json.chatSettings,
                    messages: json.messages,
                };
            }
            catch (error) {
                if (error instanceof Error) {
                    throw new Error(`Failed to parse request body: ${error.message}`);
                }
                else {
                    throw new Error('Failed to parse request body due to an unknown error');
                }
            }
        });
    }
    handleError(error) {
        if (this.client && 'handleError' in this.client) {
            error = this.client.handleError(error);
        }
        const errorMessage = error.message || 'An unexpected error occurred';
        const errorCode = error.status || 500;
        return new Response(JSON.stringify({ message: errorMessage }), {
            status: errorCode,
        });
    }
    generateEmbeddings(model, texts, truncation, dimensions, inputType) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkClient();
            return yield this.client
                .embeddings()
                .generateEmbeddings(model, texts, truncation, dimensions, inputType);
        });
    }
}
exports.Client = Client;
