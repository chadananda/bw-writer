"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientBase = exports.EmbeddingBase = exports.ChatBase = exports.TokenizerBase = void 0;
const ApiError_1 = require("./ApiError");
class TokenizerBase {
}
exports.TokenizerBase = TokenizerBase;
class ChatBase {
    getMaxGeneratedTokens(chatSettings) {
        var _a;
        if (chatSettings.maxTokens > chatSettings.model.maxTokenOutputLength)
            return chatSettings.model.maxTokenOutputLength;
        return (_a = chatSettings.maxTokens) !== null && _a !== void 0 ? _a : chatSettings.model.maxTokenOutputLength;
    }
}
exports.ChatBase = ChatBase;
class EmbeddingBase {
}
exports.EmbeddingBase = EmbeddingBase;
class ClientBase {
    handleError(error) {
        let errorMessage = error.message || 'An unexpected error occurred';
        const errorCode = error.status || 500;
        if (errorMessage.toLowerCase().includes('api key not found')) {
            errorMessage =
                'API Key not found. Please set it in your profile settings.';
        }
        else if (errorMessage.toLowerCase().includes('incorrect api key')) {
            errorMessage =
                'API Key is incorrect. Please fix it in your profile settings.';
        }
        return new ApiError_1.ApiError(errorMessage, errorCode);
    }
    chat() {
        if (!this.chatClient) {
            throw new Error('Chat client not initialized');
        }
        return this.chatClient;
    }
    embeddings() {
        if (!this.embeddingsClient) {
            throw new Error('Embeddings client not initialized');
        }
        return this.embeddingsClient;
    }
}
exports.ClientBase = ClientBase;
