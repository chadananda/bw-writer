import { ApiError } from './ApiError';
import { ApiKeyValues, ChatMessage, EmbeddingModel, EmbeddingResult, LLMSettings } from './types';
import { StreamingTextResponse } from 'ai';
export declare abstract class TokenizerBase {
    abstract encode(text: string): number[];
    abstract decode(tokens: number[]): string;
    abstract countTokens(text: string): number;
}
export declare abstract class ChatBase {
    abstract generateChatCompletionStream(chatSettings: LLMSettings, messages: ChatMessage[]): Promise<StreamingTextResponse>;
    protected getMaxGeneratedTokens(chatSettings: LLMSettings): number;
}
export declare abstract class EmbeddingBase {
    abstract generateEmbeddings(model: EmbeddingModel, texts: string[], truncation?: boolean, dimensions?: number, inputType?: 'query' | 'document'): Promise<EmbeddingResult>;
}
export declare abstract class ClientBase {
    embeddingsClient: EmbeddingBase | undefined;
    chatClient: ChatBase | undefined;
    abstract initialize(apiKeyValues: ApiKeyValues): Promise<void>;
    handleError(error: ApiError): ApiError;
    chat(): ChatBase;
    embeddings(): EmbeddingBase;
}
