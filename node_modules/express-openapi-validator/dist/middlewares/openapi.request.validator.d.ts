import { NextFunction, Response } from 'express';
import { OpenAPIV3, OpenApiRequest, RequestValidatorOptions } from '../framework/types';
export declare class RequestValidator {
    private middlewareCache;
    private apiDoc;
    private ajv;
    private ajvBody;
    private requestOpts;
    constructor(apiDoc: OpenAPIV3.DocumentV3 | OpenAPIV3.DocumentV3_1, options?: RequestValidatorOptions);
    validate(req: OpenApiRequest, res: Response, next: NextFunction): void | Promise<void>;
    private warnUnknownQueryParametersKeyword;
    private buildMiddleware;
    private multipartNested;
    private discriminatorValidator;
    private processQueryParam;
    /**
     * Mutates and normalizes the req.query object by parsing braket notation query string key values pairs
     * into its corresponding key=<json-object> and update req.query with the parsed value
     * for instance, req.query that equals { filter[name]: test} is translated into { filter: { name: 'test' }, where
     * the query string field is set as filter and its value is the full javascript object (translated from bracket notation)
     * @param keys
     * @returns
     */
    private normalizeQueryFields;
}
